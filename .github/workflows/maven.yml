name: Java CI with Maven

on:
  push:
    branches: [ master ]

jobs:
  run_test:
    name: Unit Test
    runs-on: ubuntu-18.04
    steps:
      - run: echo "Starting execute unit test"
      - uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'adopt'
      - name: Maven Verify
        run: mvn clean verify

  build:
    name: Build
    runs-on: ubuntu-18.04
    needs: run_test
    steps:
      - run: echo "Starting execute unit test"
      - uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'adopt'
      - name: Maven Build
        run: mvn clean package -Dmaven.test.skip=true
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/e_commerce:latest

  deployment:
    name: Deployment
    runs-on: ubuntu-18.04
    needs: build
    steps:
      - uses: actions/checkout@v3
      - name: copy file via ssh key
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          port: 22
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "./dev.env"
          target: /home/${{ secrets.SSH_USER }}
      - name: Deploy Using ssh
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          script: |
            docker stop e_commerce
            docker rmi michaelmgp/e_commerce:latest
            docker pull michaelmgp/e_commerce:latest
            docker start postgres
            docker run -d --rm --name e_commerce -p 80:8080 --env-file=dev.env --network e-commerce michaelmgp/e_commerce:latest
  
